#!/usr/bin/env bash

[[ $SECURSOR_X_DEBUG ]] && set -x

set -euo pipefail

help() (
  cat <<'...'
Usage: secursor [options] [repo]

Options:
      --start         Start the editor (default)
  -r, --restart       Run --kill and --start

  -k, --kill          Kill the editor container
  -K, --rmi           Kill the container & rmi the image
  -R, --rebuild       Rebuild the image and restart

  -s, --status        Show docker status
  -S, --status-all    Show docker status for all secursors

      --shell         Start a shell in cursor container

  -h, --help          Show this help message
  -v, --version       Show the version

...
)

main() (
  init

  if [[ $# -eq 0 ]]; then
    set -- --start
  fi

  if [[ ${1-} == -* ]]; then
    action "$@"
    exit
  fi

  [[ $# -gt 0 ]] || set -- "$(pwd -P)"

  setup "$@"; shift

  cd "$repo" ||
    die "Failed to cd to repo: $repo"

  init

  make -e -f "$root/Makefile" start "$@"
)

action() (
  action=$1; shift
  [[ $# -gt 0 ]] || set -- "$(pwd -P)"

  case $action in
    -h|--help)
      help
      exit
      ;;

    -v|--version)
      make --no-print-directory -f "$root/Makefile" version
      exit
      ;;

    --start)
      make -e -f "$root/Makefile" start
      ;;

    -r|--restart)
      setup "$@"
      make -e -f "$root/Makefile" kill
      secursor "$@"
      ;;

    -k|--kill)
      make -e -f "$root/Makefile" kill
      ;;

    -K|--rmi)
      make -e -f "$root/Makefile" rmi
      ;;

    -R|--rebuild)
      setup "$@"
      make -e -f "$root/Makefile" rmi
      secursor "$@"
      ;;

    --shell)
      make -e -f "$root/Makefile" shell
      ;;

    -s|--status)
      make -e -f "$root/Makefile" status
      ;;

    -S|--status-all)
      make -e -f "$root/Makefile" status-all
      ;;

    *)
      die "Unknown action flag: $1";;
  esac
)

init() {
  root=$(cd "$(dirname "${BASH_SOURCE[0]:-$0}")/.." && pwd -P)
  export SECURSOR_ROOT=$root
  assert-home-config
}

assert-home-config() (
  HS=$HOME/.secursor
  [[ -d $HS ]] || mkdir -p "$HS"
  [[ -f $HS/config ]] ||
    cp "$root/share/config" "$HS/config"
  [[ -f $HS/bashrc ]] ||
    cp "$root/share/bashrc" "$HS/bashrc"
)

setup() {
  { [[ -d $root ]] &&
    [[ -f $root/Makefile ]] &&
    [[ -f $root/Dockerfile ]] &&
    [[ -x $root/bin/secursor ]]
  } || die "${BASH_SOURCE[0]:-$0} can't be run. Report this error, please."

  repo=$1
  [[ $repo ]] ||
    die 'No repo directory provided'
  [[ -d $repo ]] ||
    die "Repo directory does not exist: $repo"
  gitdir=$(git -C "$repo" rev-parse --git-common-dir 2>/dev/null || true)
  [[ $gitdir ]] ||
    die "Repo is not a git repository: $repo"
  [[ -d $gitdir ]] ||
    die "Git directory does not exist: $gitdir"
  [[ $gitdir == *.git && -d $gitdir ]] ||
    die "Git directory is not a git repository: $gitdir"
  repo=$(cd "$repo" && pwd -P)
  gitdir=$(cd "$gitdir" && pwd -P)
}

die() {
  local msg=${1:-' died'}; shift
  msg="Error: $msg"
  printf '%s\n' "$msg" "$@" >&2
  exit 1
}

main "$@"
